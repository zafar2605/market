definitions:
  handler.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  models.Branch:
    properties:
      address:
        type: string
      branch_code:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
  models.Category:
    properties:
      created_at:
        type: string
      id:
        type: string
      parent_id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.CreateBranch:
    properties:
      address:
        type: string
      branch_code:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  models.CreateCategory:
    properties:
      parent_id:
        type: string
      title:
        type: string
    type: object
  models.CreateEmployee:
    properties:
      branch_id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      login:
        type: string
      password:
        type: string
      phone:
        type: string
      salepoint_id:
        type: string
      user_type:
        type: string
    type: object
  models.CreateIncome:
    properties:
      branch_id:
        type: string
      date_time:
        type: string
      status:
        type: string
      supplier_id:
        type: string
    type: object
  models.CreateIncomeProduct:
    properties:
      barcode:
        type: string
      category_id:
        type: string
      income_id:
        type: string
      income_price:
        type: number
      product_name:
        type: string
      quantity:
        type: integer
    type: object
  models.CreatePayment:
    properties:
      apelsin:
        type: number
      cash:
        type: number
      click:
        type: number
      humo:
        type: number
      payme:
        type: number
      sale_id:
        type: string
      total_amount:
        type: number
      uzcard:
        type: number
    type: object
  models.CreateProduct:
    properties:
      barcode:
        type: string
      category_id:
        type: string
      photo:
        type: string
      price:
        type: number
      title:
        type: string
    type: object
  models.CreateRemainder:
    properties:
      barcode:
        type: string
      branch_id:
        type: string
      category_id:
        type: string
      price_income:
        type: number
      product_name:
        type: string
      quantity:
        type: integer
    type: object
  models.CreateSale:
    properties:
      barcode:
        type: string
      branch_id:
        type: string
      employee_id:
        type: string
      sale_id:
        type: string
      salepoint_id:
        type: string
      shift_id:
        type: string
      status:
        type: string
    type: object
  models.CreateSalePoint:
    properties:
      branch_id:
        type: string
      name:
        type: string
    type: object
  models.CreateSaleProduct:
    properties:
      allow_discount:
        type: boolean
      barcode:
        type: string
      category_id:
        type: string
      discount:
        type: number
      discount_type:
        type: string
      price:
        type: number
      product_name:
        type: string
      quantity:
        type: integer
      remaining_quantity:
        type: integer
      sale_id:
        type: string
      total_amount:
        type: number
    type: object
  models.CreateShift:
    properties:
      branch_id:
        type: string
      close_shift:
        type: string
      employee_id:
        type: string
      open_shift:
        type: string
      sale_point_id:
        type: string
      status:
        type: string
    type: object
  models.CreateSupplier:
    properties:
      is_active:
        type: boolean
      name:
        type: string
      phone_number:
        type: string
    type: object
  models.CreateTransaction:
    properties:
      apelsin:
        type: number
      cash:
        type: number
      click:
        type: number
      humo:
        type: number
      payme:
        type: number
      sale_id:
        type: string
      total_amount:
        type: number
      uzcard:
        type: number
    type: object
  models.CreateUser:
    properties:
      active:
        type: boolean
      client_type:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      login:
        type: string
      password:
        type: string
    type: object
  models.Employee:
    properties:
      branch_id:
        type: string
      created_at:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      login:
        type: string
      password:
        type: string
      phone:
        type: string
      salepoint_id:
        type: string
      updated_at:
        type: string
      user_type:
        type: string
    type: object
  models.GetListSaleProductResponse:
    properties:
      count:
        type: integer
      sale_products:
        items:
          $ref: '#/definitions/models.SaleProduct'
        type: array
    type: object
  models.Income:
    properties:
      branch_id:
        type: string
      created_at:
        type: string
      date_time:
        type: string
      id:
        type: string
      status:
        type: string
      supplier_id:
        type: string
      updated_at:
        type: string
    type: object
  models.IncomeProduct:
    properties:
      barcode:
        type: string
      category_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      income_id:
        type: string
      income_price:
        type: number
      product_name:
        type: string
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  models.LoginRequest:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.Payment:
    properties:
      apelsin:
        type: number
      cash:
        type: number
      click:
        type: number
      created_at:
        type: string
      humo:
        type: number
      id:
        type: string
      payme:
        type: number
      sale_id:
        type: string
      total_amount:
        type: number
      updated_at:
        type: string
      uzcard:
        type: number
    type: object
  models.Product:
    properties:
      barcode:
        type: string
      category_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      photo:
        type: string
      price:
        type: number
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.Remainder:
    properties:
      barcode:
        type: string
      branch_id:
        type: string
      category_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      price_income:
        type: number
      product_name:
        type: string
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  models.Sale:
    properties:
      barcode:
        type: string
      branch_id:
        type: string
      created_at:
        type: string
      employee_id:
        type: string
      id:
        type: string
      sale_id:
        type: string
      salepoint_id:
        type: string
      shift_id:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.SalePoint:
    properties:
      branch_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.SaleProduct:
    properties:
      allow_discount:
        type: boolean
      barcode:
        type: string
      category_id:
        type: string
      created_at:
        type: string
      discount:
        type: number
      discount_type:
        type: string
      id:
        type: string
      price:
        type: number
      product_name:
        type: string
      quantity:
        type: integer
      remaining_quantity:
        type: integer
      sale_id:
        type: string
      total_amount:
        type: number
      updated_at:
        type: string
    type: object
  models.Shift:
    properties:
      branch_id:
        type: string
      close_shift:
        type: string
      created_at:
        type: string
      employee_id:
        type: string
      id:
        type: string
      open_shift:
        type: string
      sale_point_id:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.Supplier:
    properties:
      created_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      phone_number:
        type: string
      updated_at:
        type: string
    type: object
  models.Transaction:
    properties:
      apelsin:
        type: number
      cash:
        type: number
      click:
        type: number
      created_at:
        type: string
      humo:
        type: number
      id:
        type: string
      payme:
        type: number
      shift_id:
        type: string
      total_amount:
        type: number
      updated_at:
        type: string
      uzcard:
        type: number
    type: object
  models.UpdateBranch:
    properties:
      address:
        type: string
      branch_code:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  models.UpdateCategory:
    properties:
      id:
        type: string
      parent_id:
        type: string
      title:
        type: string
    type: object
  models.UpdateEmployee:
    properties:
      branch_id:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      login:
        type: string
      password:
        type: string
      phone:
        type: string
      salepoint_id:
        type: string
      user_type:
        type: string
    type: object
  models.UpdateIncome:
    properties:
      branch_id:
        type: string
      date_time:
        type: string
      id:
        type: string
      status:
        type: string
      supplier_id:
        type: string
    type: object
  models.UpdateIncomeProduct:
    properties:
      barcode:
        type: string
      category_id:
        type: string
      id:
        type: string
      income_id:
        type: string
      income_price:
        type: number
      product_name:
        type: string
      quantity:
        type: integer
    type: object
  models.UpdatePayment:
    properties:
      apelsin:
        type: number
      cash:
        type: number
      click:
        type: number
      humo:
        type: number
      id:
        type: string
      payme:
        type: number
      total_amount:
        type: number
      uzcard:
        type: number
    type: object
  models.UpdateProduct:
    properties:
      barcode:
        type: string
      category_id:
        type: string
      id:
        type: string
      photo:
        type: string
      price:
        type: number
      title:
        type: string
    type: object
  models.UpdateRemainder:
    properties:
      barcode:
        type: string
      id:
        type: string
      price_income:
        type: number
      product_name:
        type: string
      quantity:
        type: integer
    type: object
  models.UpdateSale:
    properties:
      barcode:
        type: string
      branch_id:
        type: string
      employee_id:
        type: string
      id:
        type: string
      salepoint_id:
        type: string
      shift_id:
        type: string
      status:
        type: string
    type: object
  models.UpdateSalePoint:
    properties:
      branch_id:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  models.UpdateSaleProduct:
    properties:
      allow_discount:
        type: boolean
      discount:
        type: number
      discount_type:
        type: string
      id:
        type: string
      price:
        type: number
      quantity:
        type: integer
      remaining_quantity:
        type: integer
      total_amount:
        type: number
    type: object
  models.UpdateShift:
    properties:
      branch_id:
        type: string
      close_shift:
        type: string
      employee_id:
        type: string
      id:
        type: string
      open_shift:
        type: string
      sale_point_id:
        type: string
      status:
        type: string
    type: object
  models.UpdateSupplier:
    properties:
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      phone_number:
        type: string
    type: object
  models.UpdateTransaction:
    properties:
      apelsin:
        type: number
      cash:
        type: number
      click:
        type: number
      humo:
        type: number
      id:
        type: string
      payme:
        type: number
      total_amount:
        type: number
      uzcard:
        type: number
    type: object
  models.UpdateUser:
    properties:
      active:
        type: boolean
      client_type:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      login:
        type: string
      password:
        type: string
    type: object
  models.User:
    properties:
      active:
        type: boolean
      client_type:
        type: string
      created_at:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      login:
        type: string
      password:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns an access token
      parameters:
      - description: User login information
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: User Login
      tags:
      - auth
  /v1/branch:
    get:
      consumes:
      - application/json
      description: Get a list of branch with optional filtering.
      parameters:
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of branch
          schema:
            items:
              $ref: '#/definitions/models.Branch'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of branch
      tags:
      - branch
    post:
      consumes:
      - application/json
      description: Create a new branch in the market system.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Branch information
        in: body
        name: branch
        required: true
        schema:
          $ref: '#/definitions/models.CreateBranch'
      produces:
      - application/json
      responses:
        "201":
          description: Created branch
          schema:
            $ref: '#/definitions/models.Branch'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new branch
      tags:
      - branch
  /v1/branch/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing branch.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a branch
      tags:
      - branch
    get:
      consumes:
      - application/json
      description: Get branch details by its ID.
      parameters:
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Branch details
          schema:
            $ref: '#/definitions/models.Branch'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Branch not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a branch by ID
      tags:
      - branch
    put:
      consumes:
      - application/json
      description: Update an existing branch.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated branch information
        in: body
        name: branch
        required: true
        schema:
          $ref: '#/definitions/models.UpdateBranch'
      produces:
      - application/json
      responses:
        "202":
          description: Updated branch
          schema:
            $ref: '#/definitions/models.Branch'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Branch not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a branch
      tags:
      - branch
  /v1/category:
    get:
      consumes:
      - application/json
      description: Get a list of category with optional filtering.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of category
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of category
      tags:
      - category
    post:
      consumes:
      - application/json
      description: Create a new category in the market system.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Created category
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new category
      tags:
      - category
  /v1/category/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing category.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a category
      tags:
      - category
    get:
      consumes:
      - application/json
      description: Get category details by its ID.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category details
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a category by ID
      tags:
      - category
    put:
      consumes:
      - application/json
      description: Update an existing category.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCategory'
      produces:
      - application/json
      responses:
        "202":
          description: Updated category
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a category
      tags:
      - category
  /v1/employee:
    get:
      consumes:
      - application/json
      description: Get a list of employees with optional filtering.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of employees
          schema:
            items:
              $ref: '#/definitions/models.Employee'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of employees
      tags:
      - employee
    post:
      consumes:
      - application/json
      description: Create a new employee in the market system.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Employee information
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/models.CreateEmployee'
      produces:
      - application/json
      responses:
        "201":
          description: Created employee
          schema:
            $ref: '#/definitions/models.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new employee
      tags:
      - employee
  /v1/employee/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing employee.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete an employee
      tags:
      - employee
    get:
      consumes:
      - application/json
      description: Get employee details by its ID.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Employee details
          schema:
            $ref: '#/definitions/models.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Employee not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get an employee by ID
      tags:
      - employee
    put:
      consumes:
      - application/json
      description: Update an existing employee.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated employee information
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/models.UpdateEmployee'
      produces:
      - application/json
      responses:
        "202":
          description: Updated employee
          schema:
            $ref: '#/definitions/models.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Employee not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update an employee
      tags:
      - employee
  /v1/income:
    get:
      consumes:
      - application/json
      description: Get a list of incomes with optional filtering.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of incomes
          schema:
            items:
              $ref: '#/definitions/models.Income'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of incomes
      tags:
      - income
    post:
      consumes:
      - application/json
      description: Create a new income in the market system.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Income information
        in: body
        name: income
        required: true
        schema:
          $ref: '#/definitions/models.CreateIncome'
      produces:
      - application/json
      responses:
        "201":
          description: Created income
          schema:
            $ref: '#/definitions/models.Income'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new income
      tags:
      - income
  /v1/income/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing income.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Income ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete an income
      tags:
      - income
    get:
      consumes:
      - application/json
      description: Get income details by its ID.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Income ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Income details
          schema:
            $ref: '#/definitions/models.Income'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Income not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get an income by ID
      tags:
      - income
    put:
      consumes:
      - application/json
      description: Update an existing income.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Income ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated income information
        in: body
        name: income
        required: true
        schema:
          $ref: '#/definitions/models.UpdateIncome'
      produces:
      - application/json
      responses:
        "202":
          description: Updated income
          schema:
            $ref: '#/definitions/models.Income'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Income not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update an income
      tags:
      - income
  /v1/income_product:
    get:
      consumes:
      - application/json
      description: Get a list of income products with optional filtering.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of income products
          schema:
            items:
              $ref: '#/definitions/models.IncomeProduct'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of income products
      tags:
      - income_product
    post:
      consumes:
      - application/json
      description: Create a new income product in the market system.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Income product information
        in: body
        name: income_product
        required: true
        schema:
          $ref: '#/definitions/models.CreateIncomeProduct'
      produces:
      - application/json
      responses:
        "201":
          description: Created income product
          schema:
            $ref: '#/definitions/models.IncomeProduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new income product
      tags:
      - income_product
  /v1/income_product/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing income product.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Income Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete an income product
      tags:
      - income_product
    get:
      consumes:
      - application/json
      description: Get income product details by its ID.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Income Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Income product details
          schema:
            $ref: '#/definitions/models.IncomeProduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Income product not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get an income product by ID
      tags:
      - income_product
    put:
      consumes:
      - application/json
      description: Update an existing income product.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Income Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated income product information
        in: body
        name: income_product
        required: true
        schema:
          $ref: '#/definitions/models.UpdateIncomeProduct'
      produces:
      - application/json
      responses:
        "202":
          description: Updated income product
          schema:
            $ref: '#/definitions/models.IncomeProduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Income product not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update an income product
      tags:
      - income_product
  /v1/payment:
    get:
      consumes:
      - application/json
      description: Get a list of payments with optional filtering.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of payments
          schema:
            items:
              $ref: '#/definitions/models.Payment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of payments
      tags:
      - payment
    post:
      consumes:
      - application/json
      description: Create a new payment in the market system.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Payment information
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/models.CreatePayment'
      produces:
      - application/json
      responses:
        "201":
          description: Created payment
          schema:
            $ref: '#/definitions/models.Payment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new payment
      tags:
      - payment
  /v1/payment/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing payment.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a payment
      tags:
      - payment
    get:
      consumes:
      - application/json
      description: Get payment details by its ID.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Payment details
          schema:
            $ref: '#/definitions/models.Payment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Payment not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a payment by ID
      tags:
      - payment
    put:
      consumes:
      - application/json
      description: Update an existing payment.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated payment information
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePayment'
      produces:
      - application/json
      responses:
        "202":
          description: Updated payment
          schema:
            $ref: '#/definitions/models.Payment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Payment not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a payment
      tags:
      - payment
  /v1/product:
    get:
      consumes:
      - application/json
      description: Get a list of products with optional filtering.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of products
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Create a new product in the market system.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Product information
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.CreateProduct'
      produces:
      - application/json
      responses:
        "201":
          description: Created product
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new product
      tags:
      - product
  /v1/product/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing product.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a product
      tags:
      - product
    get:
      consumes:
      - application/json
      description: Get product details by its ID.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product details
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a product by ID
      tags:
      - product
    put:
      consumes:
      - application/json
      description: Update an existing product.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated product information
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProduct'
      produces:
      - application/json
      responses:
        "202":
          description: Updated product
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a product
      tags:
      - product
  /v1/remainder:
    get:
      consumes:
      - application/json
      description: Get a list of remainder with optional filtering.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of remainder
          schema:
            items:
              $ref: '#/definitions/models.Remainder'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of remainder
      tags:
      - remainder
    post:
      consumes:
      - application/json
      description: Create a new remainder in the market system.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Remainder information
        in: body
        name: remainder
        required: true
        schema:
          $ref: '#/definitions/models.CreateRemainder'
      produces:
      - application/json
      responses:
        "201":
          description: Created remainder
          schema:
            $ref: '#/definitions/models.Remainder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new remainder
      tags:
      - remainder
  /v1/remainder/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing remainder.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Remainder ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Remainder not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a remainder
      tags:
      - remainder
    get:
      consumes:
      - application/json
      description: Get remainder details by its ID.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Remainder ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Remainder details
          schema:
            $ref: '#/definitions/models.Remainder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Remainder not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a remainder by ID
      tags:
      - remainder
    put:
      consumes:
      - application/json
      description: Update an existing remainder.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Remainder ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated remainder information
        in: body
        name: remainder
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRemainder'
      produces:
      - application/json
      responses:
        "202":
          description: Updated remainder
          schema:
            $ref: '#/definitions/models.Remainder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Remainder not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a remainder
      tags:
      - remainder
  /v1/sale:
    get:
      consumes:
      - application/json
      description: Get a list of sales with optional filtering.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of sales
          schema:
            items:
              $ref: '#/definitions/models.Sale'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of sales
      tags:
      - sale
    post:
      consumes:
      - application/json
      description: Create a new sale in the market system.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Sale information
        in: body
        name: sale
        required: true
        schema:
          $ref: '#/definitions/models.CreateSale'
      produces:
      - application/json
      responses:
        "201":
          description: Created sale
          schema:
            $ref: '#/definitions/models.Sale'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new sale
      tags:
      - sale
  /v1/sale/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing sale.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Sale ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a sale
      tags:
      - sale
    get:
      consumes:
      - application/json
      description: Get sale details by its ID.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Sale ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sale details
          schema:
            $ref: '#/definitions/models.Sale'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Sale not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a sale by ID
      tags:
      - sale
    put:
      consumes:
      - application/json
      description: Update an existing sale.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Sale ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated sale information
        in: body
        name: sale
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSale'
      produces:
      - application/json
      responses:
        "202":
          description: Updated sale
          schema:
            $ref: '#/definitions/models.Sale'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Sale not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a sale
      tags:
      - sale
  /v1/sale_point:
    get:
      consumes:
      - application/json
      description: Get a list of sale points with optional filtering.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of sale points
          schema:
            items:
              $ref: '#/definitions/models.SalePoint'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of sale points
      tags:
      - sale_point
    post:
      consumes:
      - application/json
      description: Create a new sale point in the market system.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Sale point information
        in: body
        name: salePoint
        required: true
        schema:
          $ref: '#/definitions/models.CreateSalePoint'
      produces:
      - application/json
      responses:
        "201":
          description: Created sale point
          schema:
            $ref: '#/definitions/models.SalePoint'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new sale point
      tags:
      - sale_point
  /v1/sale_point/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing sale point.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Sale Point ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a sale point
      tags:
      - sale_point
    get:
      consumes:
      - application/json
      description: Get sale point details by its ID.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Sale Point ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sale point details
          schema:
            $ref: '#/definitions/models.SalePoint'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Sale point not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a sale point by ID
      tags:
      - sale_point
    put:
      consumes:
      - application/json
      description: Update an existing sale point.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Sale Point ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated sale point information
        in: body
        name: salePoint
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSalePoint'
      produces:
      - application/json
      responses:
        "202":
          description: Updated sale point
          schema:
            $ref: '#/definitions/models.SalePoint'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Sale point not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a sale point
      tags:
      - sale_point
  /v1/sale_product:
    get:
      consumes:
      - application/json
      description: Get a list of sale products with optional filtering.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of sale products
          schema:
            $ref: '#/definitions/models.GetListSaleProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of sale products
      tags:
      - sale_product
    post:
      consumes:
      - application/json
      description: Create a new sale product in the market system.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Sale Product information
        in: body
        name: saleProduct
        required: true
        schema:
          $ref: '#/definitions/models.CreateSaleProduct'
      produces:
      - application/json
      responses:
        "201":
          description: Created sale product
          schema:
            $ref: '#/definitions/models.SaleProduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new sale product
      tags:
      - sale_product
  /v1/sale_product/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing sale product.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Sale Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a sale product
      tags:
      - sale_product
    get:
      consumes:
      - application/json
      description: Get sale product details by its ID.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Sale Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sale Product details
          schema:
            $ref: '#/definitions/models.SaleProduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Sale Product not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a sale product by ID
      tags:
      - sale_product
    put:
      consumes:
      - application/json
      description: Update an existing sale product.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Sale Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated sale product information
        in: body
        name: saleProduct
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSaleProduct'
      produces:
      - application/json
      responses:
        "202":
          description: Updated sale product
          schema:
            $ref: '#/definitions/models.SaleProduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Sale Product not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a sale product
      tags:
      - sale_product
  /v1/shift:
    get:
      consumes:
      - application/json
      description: Get a list of shifts with optional filtering.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of shifts
          schema:
            items:
              $ref: '#/definitions/models.Shift'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of shifts
      tags:
      - shift
    post:
      consumes:
      - application/json
      description: Create a new shift in the market system.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Shift information
        in: body
        name: shift
        required: true
        schema:
          $ref: '#/definitions/models.CreateShift'
      produces:
      - application/json
      responses:
        "201":
          description: Created shift
          schema:
            $ref: '#/definitions/models.Shift'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new shift
      tags:
      - shift
  /v1/shift/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing shift.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Shift ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a shift
      tags:
      - shift
    get:
      consumes:
      - application/json
      description: Get shift details by its ID.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Shift ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Shift details
          schema:
            $ref: '#/definitions/models.Shift'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Shift not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a shift by ID
      tags:
      - shift
    put:
      consumes:
      - application/json
      description: Update an existing shift.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Shift ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated shift information
        in: body
        name: shift
        required: true
        schema:
          $ref: '#/definitions/models.UpdateShift'
      produces:
      - application/json
      responses:
        "202":
          description: Updated shift
          schema:
            $ref: '#/definitions/models.Shift'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Shift not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a shift
      tags:
      - shift
  /v1/supplier:
    get:
      consumes:
      - application/json
      description: Get a list of suppliers with optional filtering.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of suppliers
          schema:
            items:
              $ref: '#/definitions/models.Supplier'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of suppliers
      tags:
      - supplier
    post:
      consumes:
      - application/json
      description: Create a new supplier in the market system.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Supplier information
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/models.CreateSupplier'
      produces:
      - application/json
      responses:
        "201":
          description: Created supplier
          schema:
            $ref: '#/definitions/models.Supplier'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new supplier
      tags:
      - supplier
  /v1/supplier/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing supplier.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a supplier
      tags:
      - supplier
    get:
      consumes:
      - application/json
      description: Get supplier details by its ID.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Supplier details
          schema:
            $ref: '#/definitions/models.Supplier'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Supplier not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a supplier by ID
      tags:
      - supplier
    put:
      consumes:
      - application/json
      description: Update an existing supplier.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated supplier information
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSupplier'
      produces:
      - application/json
      responses:
        "202":
          description: Updated supplier
          schema:
            $ref: '#/definitions/models.Supplier'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Supplier not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a supplier
      tags:
      - supplier
  /v1/transaction:
    get:
      consumes:
      - application/json
      description: Get a list of transactions with optional filtering.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of transactions
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of transactions
      tags:
      - transaction
    post:
      consumes:
      - application/json
      description: Create a new transaction in the market system.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Transaction information
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.CreateTransaction'
      produces:
      - application/json
      responses:
        "201":
          description: Created transaction
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new transaction
      tags:
      - transaction
  /v1/transaction/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing transaction.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a transaction
      tags:
      - transaction
    get:
      consumes:
      - application/json
      description: Get transaction details by its ID.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction details
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Transaction not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a transaction by ID
      tags:
      - transaction
    put:
      consumes:
      - application/json
      description: Update an existing transaction.
      parameters:
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password
        in: header
        name: Password
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated transaction information
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTransaction'
      produces:
      - application/json
      responses:
        "202":
          description: Updated transaction
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Transaction not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a transaction
      tags:
      - transaction
  /v1/user:
    get:
      consumes:
      - application/json
      description: Get a list of users with optional filtering.
      parameters:
      - description: Number of items to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of items to skip (default 0)
        in: query
        name: offset
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a list of users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user in the market system.
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /v1/user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user details by user ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      produces:
      - application/json
      responses:
        "202":
          description: Updated user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a user
      tags:
      - users
swagger: "2.0"
